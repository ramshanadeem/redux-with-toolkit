{"version":3,"sources":["logo.svg","features/todolist/todoSlicer.js","components/Todos.js","components/AddTodo.js","App.js","features/counter/counterSlice.js","features/post/postSlice.js","app/store.js","serviceWorker.js","index.js","components/Todo.module.css"],"names":["fetchposts","createAsyncThunk","data","thunkAPI","a","fetch","response","json","todoSlicer","createSlice","name","initialState","todos","text","id","posts","reducers","addTodo","state","action","push","Math","random","payload","completed","delAll","length","delTodo","filter","item","editTodo","find","console","log","parseFloat","extraReducers","fulfilled","slice","actions","useStyles","makeStyles","theme","root","margin","spacing","Todos","classes","useSelector","todo","statepost","dispatch","useDispatch","className","map","style","textDecoration","padding","listStyle","borderRadius","transition","styles","flex","marginRight","button","onClick","color","green","newTodo","prompt","handleEdit","title","body","AddTodo","React","useState","setTodo","paddingBottom","value","type","height","textbox","onChange","e","preventDefault","target","btnLg","parentElement","firstChild","App","counterSlice","increment","decrement","incrementByAmount","postSlice","configureStore","reducer","counter","counterReducer","todoReducer","post","postReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.84ff13d9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.db36153e.svg\";","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nexport const fetchposts = createAsyncThunk(\r\n    'fetchposts',\r\n    async (data, thunkAPI) => {\r\n      const response = await fetch('https://jsonplaceholder.typicode.com/posts/')\r\n      return await response.json()\r\n    }\r\n  )\r\nexport const todoSlicer = createSlice({\r\n    name: 'todolist',\r\n    // for single \r\n    // initialState: [\r\n    //     {\r\n    //         id: 1,\r\n    //         text : 'Hey',\r\n    //     }\r\n    // ],\r\n    // for multiple\r\n    initialState: {\r\n        todos: [{text:'buy milk', id:1}],\r\n        posts: []\r\n    },\r\n    reducers: {\r\n        addTodo(state, action) {\r\n            // const { id, text } = action.payload\r\n            // return [...state,{ id : Math.random(0,9), \r\n            //     text : action.payload,\r\n            //     completed: false}]\r\n            state.todos.push({ \r\n                id : Math.random(0,9), \r\n                text : action.payload,\r\n                completed: false\r\n            })\r\n        },\r\n        delAll(state){\r\n            state.todos.length = 0\r\n        },\r\n        delTodo(state, action){\r\n            state.todos = state.todos.filter((item) => \r\n                item.id !== action.payload\r\n            )\r\n            // return state.todos\r\n        },\r\n        editTodo(state, action){\r\n            let updatedTodo = state.todos.find((item) =>{\r\n                console.log(\"KK\")\r\n                console.log(item.id)\r\n                console.log(parseFloat(action.payload.id))\r\n\r\n                if (item.id == parseFloat(action.payload.id) ) {\r\n                    item.text = action.payload.text \r\n                    console.log(\"IN\")\r\n                }\r\n            }\r\n                \r\n            )\r\n            return updatedTodo\r\n        }\r\n\r\n    },\r\n    extraReducers: {\r\n        // Add reducers for additional action types here, and handle loading state as needed\r\n        [fetchposts.fulfilled]: (state, action) => {\r\n            // console.log(action.payload)\r\n            action = action.payload.slice(0,10)\r\n            console.log(action)\r\n\r\n        // Add user to the state array\r\n        state.posts = action\r\n        // return state.post\r\n        }\r\n    }\r\n})\r\n\r\nexport const {addTodo, delAll, delTodo, editTodo} = todoSlicer.actions;\r\nexport default todoSlicer.reducer\r\n\r\n\r\n\r\n// We can return directly it will set in state but if we have multiple properties set data by yourself","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { delTodo, editTodo, fetchposts } from '../features/todolist/todoSlicer'\r\nimport styles from './Todo.module.css'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { green } from '@material-ui/core/colors';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteSweepIcon from '@material-ui/icons/DeleteSweep';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > span': {\r\n            margin: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nfunction Todos() {\r\n    const classes = useStyles();\r\n    const state = useSelector(state => state.todo.todos)\r\n    const statepost = useSelector(state => state.todo.posts)\r\n    console.log(state)\r\n    const dispatch = useDispatch()\r\n    const handleDel = (id) => {\r\n        dispatch(delTodo(id, state))\r\n    }\r\n    const handleEdit = (id) => {\r\n        let title = prompt(\"Enter title\");\r\n        let newTodo = { id: id, text: title }\r\n        console.log(newTodo)\r\n        dispatch(editTodo(newTodo))\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            {\r\n                state.map((item) => {\r\n                    console.log(item)\r\n                    return (\r\n                        <div style={{ textDecoration: 'none', padding: ' 10px 20px', listStyle: 'none', borderRadius: '5px', transition: ' all 0.6 ease' }} className={styles.flex}>\r\n                            <li key={item.id}>{item.text}</li>\r\n                            <button style={{ marginRight: '2px' }} className={styles.button} onClick={() => handleDel(item.id)}><DeleteSweepIcon style={{ color: green[500] }}>></DeleteSweepIcon></button>\r\n                            <button className={styles.button} onClick={() => handleEdit(item.id)}> <EditIcon style={{ color: green[500] }}>  </EditIcon></button>\r\n\r\n\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            {\r\n                statepost.map((item) => {\r\n                    return (\r\n                        <div>\r\n                            <li key={item.id}>{item.title}</li>\r\n                            <p>{item.body}</p>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todos","import React from 'react'\r\nimport Todos from './Todos'\r\nimport { useDispatch } from 'react-redux'\r\nimport { addTodo, delAll } from '../features/todolist/todoSlicer'\r\nimport styles from './Todo.module.css'\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\nimport ClearAllIcon from '@material-ui/icons/ClearAll';\r\nfunction AddTodo() {\r\n    const dispatch = useDispatch()\r\n    const [todo, setTodo] = React.useState('')\r\n\r\n    const handleChange = (e) => {\r\n        e.preventDefault()\r\n        console.log(e.target.value)\r\n        setTodo(e.target.value)\r\n    }\r\n    const handlesubmit = (e) => {\r\n        e.preventDefault()\r\n        e.target.parentElement.firstChild.value = ''\r\n        dispatch(addTodo(todo))\r\n    }\r\n    const handleDel = (e) => {\r\n        e.preventDefault()\r\n        dispatch(delAll())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* <h3 className={styles.value}>Shopping List </h3> */}\r\n            <h4 style={{ paddingBottom: '5%' }} className={styles.value} >SHOPPING LIST</h4>\r\n            <div>\r\n                <input type=\"text\" style={{ height: '35px' }} className={styles.textbox} onChange={handleChange} />\r\n                <button className={`${styles.button} ${styles.btnLg}`} onClick={handlesubmit}><AddBoxIcon></AddBoxIcon></button>\r\n                <button className={`${styles.button} ${styles.btnLg}`} onClick={handleDel}><ClearAllIcon></ClearAllIcon></button>\r\n                <Todos />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\n\r\nimport './App.css';\r\nimport AddTodo from './components/AddTodo';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <AddTodo />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const fetchposts = createAsyncThunk(\r\n    'fetchposts',\r\n    async (data, thunkAPI) => {\r\n      const response = await fetch('https://jsonplaceholder.typicode.com/posts/')\r\n      return await response.json()\r\n    }\r\n  )\r\n\r\nexport const postSlice = createSlice({\r\n    name: 'posts',\r\n    initialState: [],\r\n    reducers: {\r\n        // standard reducer logic, with auto-generated action types per reducer\r\n    },\r\n    extraReducers: {\r\n        // Add reducers for additional action types here, and handle loading state as needed\r\n        [fetchposts.fulfilled]: (state, action) => {\r\n            console.log(action.payload)\r\n        // Add user to the state array\r\n        state.push(action.payload)\r\n        return state\r\n        }\r\n    }\r\n})\r\n\r\nexport default postSlice.reducer\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport postReducer from '../features/post/postSlice';\r\nimport todoReducer from '../features/todolist/todoSlicer';\r\n// import rootReducer from './rootReducer';\r\n\r\nexport default  configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    todo: todoReducer,\r\n    post: postReducer\r\n  },\r\n  // reducer : rootReducer\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Todo_row__3MT5z\",\"value\":\"Todo_value__1Cu6p\",\"button\":\"Todo_button__1rWOl\",\"btnLg\":\"Todo_btnLg__2oF2F\",\"flex\":\"Todo_flex__285eS\",\"textbox\":\"Todo_textbox__3ls7p\",\"asyncButton\":\"Todo_asyncButton__ISbnG Todo_button__1rWOl\"};"],"sourceRoot":""}